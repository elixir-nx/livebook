# Multiplayer pong game from scratch

## Setup

In the [Interactions with Kino](/explore/notebooks/intro-to-kino) notebook
we discussed various ways of rendering your data in Livebook, including
dynamically updating content. This time we will take this further and showcase
how we can capture user interactions.

Specifically, we will be building the the [Pong](https://en.wikipedia.org/wiki/Pong)
game directly in Livebook. Not only that, we will actually make it multiplayer!

Since we are going to code everything from, all we need is `kino` for
the visualization and interactions.

```elixir
Mix.install([
  {:kino, github: "livebook-dev/kino"}
])
```

## Painting the scene

```elixir
defmodule Scene do
  @moduledoc """
  The scene for the game objects.
  """

  defstruct [:width, :height, :scale, :objects]

  def new(width, height, opts \\ []) do
    scale = opts[:scale] || 10
    %__MODULE__{width: width, height: height, scale: scale, objects: []}
  end

  def add(scene, object) do
    update_in(scene.objects, fn objects -> [object | objects] end)
  end

  def to_svg(scene) do
    scale = scene.scale
    svgs = Enum.map(scene.objects, &Scene.Renderer.to_svg(&1, scale))

    """
    <svg viewBox="0 0 #{scene.width * scale} #{scene.height * scale}"
         xmlns="http://www.w3.org/2000/svg">
      #{svgs}
    </svg>
    """
  end
end
```

Let's render the scene:

```elixir
Scene.new(80, 10)
|> Scene.to_svg()
|> Kino.Image.new(:svg)
```

Since our scene has no objects, we only see an empty white canvas.
To address this, let's define the `Scene.Renderer` protocol and define
a handful of shapes.

```elixir
defprotocol Scene.Renderer do
  def to_svg(object, scale)
end

defmodule Scene.Rect do
  defstruct [:x, :y, :width, :height, fill: "black"]

  def new(x, y, width, height, opts \\ []) do
    struct!(%Scene.Rect{x: x, y: y, width: width, height: height}, opts)
  end

  defimpl Scene.Renderer do
    def to_svg(%Scene.Rect{x: x, y: y, width: width, height: height, fill: fill}, scale) do
      """
      <rect x="#{x * scale}"
            y="#{y * scale}"
            width="#{width * scale}"
            height="#{height * scale}"
            fill="#{fill}" />
      """
    end
  end
end

defmodule Scene.Text do
  defstruct [:x, :y, :text, font_size: 1, fill: "black"]

  def new(x, y, text, opts \\ []) do
    struct!(%Scene.Text{x: x, y: y, text: text}, opts)
  end

  defimpl Scene.Renderer do
    def to_svg(%Scene.Text{x: x, y: y, text: text, fill: fill, font_size: font_size}, scale) do
      """
      <text x="#{x * scale}"
            y="#{y * scale}"
            fill="#{fill}"
            font-size="#{font_size * scale}px"
            text-anchor="middle"
            dominant-baseline="hanging">#{text}</text>
      """
    end
  end
end
```

```elixir
Scene.new(80, 10)
|> Scene.add(Scene.Rect.new(0, 0, 80, 10, fill: "#d4f1f477"))
|> Scene.add(Scene.Text.new(40, 4, "Hello world!", font_size: 3))
|> Scene.to_svg()
|> Kino.Image.new(:svg)
```

## Animating scene objects

So far we are able to paint static objects in the scene.
However, all games have dynamic objects that move on the scene
as time passes. In our case, the dynamic objects are the paddles
and the ball.

For such, we will define an `Animation` protocol with a single
function called `step`. It receives the object, the scene, and
is responsible for animating the object one step at a time.

```elixir
defprotocol Animation do
  def step(object, scene)
end
```

We will also define the `Game.Ball` struct, which is our first actual
game object. The ball will have a radius `r`, coordinates `x` and `y`,
velocities `dx` and `dy`, and implement both `Scene.Renderer` and `Animation`
protocols.

```elixir
defmodule Game.Ball do
  defstruct [:r, :x, :y, :dx, :dy]

  def new(r, x, y, opts \\ []) do
    struct!(%Game.Ball{r: r, x: x, y: y}, opts)
  end

  defimpl Scene.Renderer do
    def to_svg(%Game.Ball{x: x, y: y, r: r}, scale) do
      """
      <circle cx="#{x * scale}" cy="#{y * scale}" r="#{r * scale}" fill="tomato" />
      """
    end
  end

  defimpl Animation do
    def step(ball, _scene) do
      %{ball | x: ball.x + ball.dx, y: ball.y + ball.dy}
    end
  end
end
```

We can now paint the ball in the scene:

```elixir
Scene.new(80, 10)
|> Scene.add(Game.Ball.new(2, 40, 4))
|> Scene.to_svg()
|> Kino.Image.new(:svg)
```

However, we can also animate the ball over the scene using a frame.
For 10 iterations, we will draw the ball, then compute the next step

```elixir
# The frame we will render scene images on top of
frame = Kino.Frame.new() |> Kino.render()

# The scene with a static background
scene =
  Scene.new(80, 20)
  |> Scene.add(Scene.Rect.new(0, 0, 80, 20, fill: "#d4f1f477"))

# The ball which we will animate
ball = Game.Ball.new(2, 2, 4, dx: 1, dy: 1)

# Every 33ms (30fps), for 20 entries,
# paint the scene and compute the new ball position
Kino.Control.interval(33)
|> Kino.Control.stream()
|> Stream.take(20)
|> Enum.reduce(ball, fn _counter, ball ->
  # Build the image
  image = scene |> Scene.add(ball) |> Scene.to_svg() |> Kino.Image.new(:svg)

  # Update the frame
  Kino.Frame.render(frame, image)

  # Animate the ball
  Animation.step(ball, scene)
end)
```

Feel free to tweak the parameters above and see how it affects the ball
movements.

You may also have noticed that, at the moment, the ball simply moves out
of the scene when it reaches the edges, which is not what we would expect
in practice. We will tackle this later once we add collision detection.
For now, let's learn how to capture the user keyboard and use it to control
the paddles.

<!-- livebook:{"branch_parent_index":0} -->

## Capturing the user keyboard

We want to use the keyword to control the paddle.
To do so, we will use `Kino.Control.keyboard/1`:

```elixir
keyboard = Kino.Control.keyboard([:status, :keyup, :keydown])
```

The above renders a keyboard icon. Once you click it, Livebook
will start capturing keyboard events. We are subscribing to three
different events:

* `:status` - it is emitted whenever the keyboard is activated/deactivated
* `:keydown` - whenever a key is pressed down
* `:keyup` - whenever a key is released up

Let's use `Kino.Control.stream/1` to capture and print those events.
In particular, we want to stream while the keyboard is enabled. Once
the keyboard is disabled (i.e. the event has the `enabled` key set to
`false`), the stream stops:

```elixir
stream =
  keyboard
  |> Kino.Control.stream()
  |> Stream.take_while(fn
    %{type: :status, enabled: false} -> false
    _event -> true
  end)

for event <- stream do
  IO.inspect(event)
end
```

Once you execute the cell above, it will start consuming
the event stream. Click on the keyboard icon and watch it
print keyboard events, as you press different keys. When
you are done, **disable the keyboard control**. Now we are
to implement the paddle object.

## Controlling the paddle with keypresses

The paddle object will be similar to the ball, it can be rendered
and animated. However, the paddle should also be able to handle
keyboard events. In particular, a paddle only moves up or
down, and only while a key is being pressed. Since there is
additional logic here, let's first define `Game.Paddle` and
the implement the protocols later.

```elixir
defmodule Game.Paddle do
  defstruct [:x, :y, :width, :height, dy: 0]
  @dy 4

  def new(x, y, width, height) do
    %Game.Paddle{x: x, y: y, width: width, height: height}
  end

  def on_key(paddle, %{key: "ArrowUp", type: :keydown}), do: %{paddle | dy: -@dy}
  def on_key(paddle, %{key: "ArrowUp", type: :keyup}), do: %{paddle | dy: 0}
  def on_key(paddle, %{key: "ArrowDown", type: :keydown}), do: %{paddle | dy: @dy}
  def on_key(paddle, %{key: "ArrowDown", type: :keyup}), do: %{paddle | dy: 0}
  def on_key(paddle, _), do: paddle
end
```

The paddle moves up while the arrow up key is pressed,
and down while the arror down key is pressed. We will
render the paddle as a rectangle:

```elixir
defimpl Scene.Renderer, for: Game.Paddle do
  def to_svg(%Game.Paddle{x: x, y: y, width: width, height: height}, scale) do
    """
    <rect x="#{x * scale}"
          y="#{y * scale}"
          width="#{width * scale}"
          height="#{height * scale}"
          fill="black" />
    """
  end
end
```

And animate it over the `y` dimension, with the addition
that the paddle must never leave the scene:

```elixir
defimpl Animation, for: Game.Paddle do
  def step(paddle, scene) do
    %{paddle | y: clip(paddle.y + paddle.dy, 0, scene.height - paddle.height)}
  end

  defp clip(value, min, max), do: value |> max(min) |> min(max)
end
```

We are ready to give it a try!

<!-- livebook:{"branch_parent_index":4} -->

## Mixing control streams

To animate the paddle, we will need two control streams:
the keyboard control and an interval to refresh
the paddle as we keep holding the arrow keys up
and down.

```elixir
# The frame we will render scene images on top of
frame = Kino.Frame.new() |> Kino.render()

# The scene with a static background
scene =
  Scene.new(200, 50)
  |> Scene.add(Scene.Rect.new(0, 0, 200, 50, fill: "#d4f1f477"))

# The paddle which we will animate
paddle = Game.Paddle.new(0, 21, 2, 8)

# The keyboard control
keyboard = Kino.Control.keyboard([:status, :keyup, :keydown]) |> Kino.render()

# For each keyboard every and on every 33ms,
# emit an event while the keyboard is enabled.
[keyboard, Kino.Control.interval(33)]
|> Kino.Control.stream()
|> Stream.take_while(fn
  event when event.enabled == false -> false
  _event -> true
end)
|> Enum.reduce(paddle, fn event, paddle ->
  # Build the image
  image = scene |> Scene.add(paddle) |> Scene.to_svg() |> Kino.Image.new(:svg)

  # Update the frame
  Kino.Frame.render(frame, image)

  # Animate the paddle
  paddle
  |> Game.Paddle.on_key(event)
  |> Animation.step(scene)
end)
```

Press the keyboard icon and you should be able to control
the paddle. In particular, as long as you hold the arrow
up or arrow down keys, the paddle should move but without
exiting the scene. Once you are done, disable the keyboard
for evaluation to finish.

Now with all of the game objects in place, let's implement
collision detection between the scene, the ball, and the
paddles.

## Collision detection

As the ball moves around, it may collide with different elements.
Let's describe those scenarios below:

* If the ball hits either the top or the bottom of the scene,
  it should reverse its y direction

* If the ball hits any of the paddles, it should reverse its
  x direction

* If the ball hits either the left or right side of the scene,
  it means the opposite paddle won

For simplicity, we will assume that:

* The paddles are positioned to the absolute left and absolute
  right of the scene

* For collision detection with the paddle, we will assume the
  ball is a square. In practice this is enough unless the ball
  is much bigger than the paddle

With this in mind, let's see the code. Our function will either
return `{:cont, ball}` or `{:won, :left | :right}`.

```elixir
defmodule Game.Collision do
  def bounce(ball, left_paddle, right_paddle, scene) do
    ball
    |> bounce_y(scene)
    |> bounce_x(left_paddle, right_paddle, scene)
  end

  defp bounce_y(ball, _scene) when ball.y - ball.r <= 0 do
    %{ball | y: ball.r, dy: -ball.dy}
  end

  defp bounce_y(ball, scene) when ball.y + ball.r >= scene.height do
    %{ball | y: scene.height - ball.r, dy: -ball.dy}
  end

  defp bounce_y(ball, _scene), do: ball

  defp bounce_x(ball, left, _right, _scene) when ball.x - ball.r <= left.width do
    if collides_vertically?(ball, left) do
      {:cont, %{ball | x: ball.r + left.width, dx: -ball.dx}}
    else
      {:won, :right}
    end
  end

  defp bounce_x(ball, _left, right, scene) when ball.x + ball.r >= scene.width do
    if collides_vertically?(ball, right) do
      {:cont, %{ball | x: scene.width - ball.r - right.width, dx: -ball.dx}}
    else
      {:won, :left}
    end
  end

  defp bounce_x(ball, _left, _right, _scene), do: {:cont, ball}

  defp collides_vertically?(ball, paddle) do
    ball.y - ball.r < paddle.y + paddle.height and ball.y + ball.r > paddle.y
  end
end
```

To ensure we got every right, let's see some tests:

```elixir
ExUnit.start(autorun: false)

defmodule Game.CollisionTest do
  use ExUnit.Case, async: true

  @scene Scene.new(200, 100)
  # Position the left paddle on the middle
  @left Game.Paddle.new(0, 40, 2, 20)
  # Position the right paddle on the middle
  @right Game.Paddle.new(198, 40, 2, 20)

  def bounce(ball), do: Game.Collision.bounce(ball, @left, @right, @scene)

  test "no bouncing" do
    ball = Game.Ball.new(10, _x = 100, _y = 50, dx: 10, dy: 10)
    assert bounce(ball) == {:cont, ball}
  end

  describe "bounces on top" do
    test "with perfect collision" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 100, _y = 10, dy: -10))
      assert ball.dy == 10
      assert ball.y == 10
    end

    test "with ball slightly outside of scene" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 100, _y = 5, dy: -10))
      assert ball.dy == 10
      assert ball.y == 10
    end
  end

  describe "bounces on bottom" do
    test "with perfect collision" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 100, _y = 90, dy: 10))
      assert ball.dy == -10
      assert ball.y == 90
    end

    test "with ball slightly outside of scene" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 100, _y = 95, dy: 10))
      assert ball.dy == -10
      assert ball.y == 90
    end
  end

  describe "bounces on left" do
    test "with perfect collision on the paddle center" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 2 + 10, _y = 50, dx: -10))
      assert ball.dx == 10
      assert ball.x == 12
    end

    test "with ball slightly inside the paddle" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 5, _y = 50, dx: -10))
      assert ball.dx == 10
      assert ball.x == 12
    end

    test "with the ball bottom touching the paddle top" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 5, _y = 31, dx: -10))
      assert ball.dx == 10
      assert ball.x == 12
    end

    test "with the ball top touching the paddle bottom" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 5, _y = 69, dx: -10))
      assert ball.dx == 10
      assert ball.x == 12
    end

    test "with the ball top perfectly missing the paddle bottom" do
      assert bounce(Game.Ball.new(10, _x = 5, _y = 70, dx: -10)) == {:won, :right}
    end

    test "with the ball bottom perfectly missing the paddle top" do
      assert bounce(Game.Ball.new(10, _x = 5, _y = 30, dx: -10)) == {:won, :right}
    end
  end

  describe "bounces on right" do
    test "with perfect collision on the paddle center" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 200 - 2 - 10, _y = 50, dx: 10))
      assert ball.dx == 10
      assert ball.x == 188
    end

    test "with ball slightly inside the paddle" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 195, _y = 50, dx: 10))
      assert ball.dx == -10
      assert ball.x == 188
    end

    test "with the ball bottom touching the paddle top" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 195, _y = 31, dx: 10))
      assert ball.dx == -10
      assert ball.x == 188
    end

    test "with the ball top touching the paddle bottom" do
      {:cont, ball} = bounce(Game.Ball.new(10, _x = 195, _y = 69, dx: 10))
      assert ball.dx == -10
      assert ball.x == 188
    end

    test "with the ball top perfectly missing the paddle bottom" do
      assert bounce(Game.Ball.new(10, _x = 195, _y = 70, dx: 10)) == {:won, :left}
    end

    test "with the ball bottom perfectly missing the paddle top" do
      assert bounce(Game.Ball.new(10, _x = 195, _y = 30, dx: 10)) == {:won, :left}
    end
  end
end

ExUnit.run()
```

All tests should pass! We are now ready to put all pieces
together. We will do so in two steps. First we will create
the `Game.State`, which will keep all objects and now how
to dispatch events to them. Then we will create the
`Game.Server` that will control the frame, keyboards, etc.

## Encapsulating the game state

```elixir
defmodule Game.State do
  @moduledoc """
  Represents the paddles game state and rules.
  """

  @w 400
  @h 200
  @ball_r 8
  @paddle_w 2
  @paddle_h 40
  @paddle_y div(@h - @paddle_h, 2)

  defstruct [:ball, :left_paddle, :left_score, :right_paddle, :right_score, :status, :scene]

  @doc """
  Returns initial game state.
  """
  def new() do
    scene =
      Scene.new(@w, @h)
      |> Scene.add(Scene.Rect.new(0, 0, @w, @h, fill: "#d4f1f477"))

    reset(%__MODULE__{scene: scene, left_score: 0, right_score: 0})
  end

  defp reset(state) do
    %{
      state
      | status: :idle,
        ball: new_ball(),
        left_paddle: Game.Paddle.new(0, @paddle_y, @paddle_w, @paddle_h),
        right_paddle: Game.Paddle.new(@w - @paddle_w, @paddle_y, @paddle_w, @paddle_h)
    }
  end

  defp new_ball() do
    # Each new ball gets a random direction.
    Game.Ball.new(
      @ball_r,
      div(@w, 2),
      div(@h, 2),
      dx: Enum.random([3, -3]),
      dy: Enum.random([2, -2])
    )
  end

  @doc """
  Marks the game as running.
  """
  def start(state) do
    %{state | status: :running}
  end

  @doc """
  Applies the event to the given paddle.
  """
  def on_key(state, :left, event) do
    update_in(state.left_paddle, &Game.Paddle.on_key(&1, event))
  end

  def on_key(state, :right, event) do
    update_in(state.right_paddle, &Game.Paddle.on_key(&1, event))
  end

  @doc """
  Performs a single step within the game by updating object positions.
  """
  def step(%{status: :running} = state) do
    %Game.State{
      ball: ball,
      left_paddle: left_paddle,
      right_paddle: right_paddle,
      scene: scene
    } = state

    ball = Animation.step(ball, scene)
    left_paddle = Animation.step(left_paddle, scene)
    right_paddle = Animation.step(right_paddle, scene)

    case Game.Collision.bounce(ball, left_paddle, right_paddle, scene) do
      {:cont, ball} ->
        %{state | ball: ball, left_paddle: left_paddle, right_paddle: right_paddle}

      {:won, :left} ->
        reset(update_in(state.left_score, &(&1 + 1)))

      {:won, :right} ->
        reset(update_in(state.right_score, &(&1 + 1)))
    end
  end

  def step(state), do: state

  @doc """
  Returns an SVG representation of the game board.
  """
  def to_svg(state) do
    %Game.State{
      ball: ball,
      left_paddle: left_paddle,
      left_score: left_score,
      right_paddle: right_paddle,
      right_score: right_score,
      scene: scene
    } = state

    text = Scene.Text.new(div(@w, 2), 4, "#{left_score} : #{right_score}", font_size: 10)

    scene
    |> Scene.add(ball)
    |> Scene.add(left_paddle)
    |> Scene.add(right_paddle)
    |> Scene.add(text)
    |> Scene.to_svg()
  end
end
```

We can now render the static game state:

```elixir
Game.State.new()
|> Game.State.to_svg()
|> Kino.Image.new(:svg)
```

As well as animate it over a frame until one of the paddles score:

```elixir
# The frame we will render scene images on top of
frame = Kino.Frame.new() |> Kino.render()

# The scene with a static background
game = Game.State.new()

# Every 33ms (30fps), paint a new frame until it completes a round.
Kino.Control.interval(33)
|> Kino.Control.stream()
|> Enum.reduce_while(Game.State.start(game), fn _, game ->
  if game.status == :running do
    game = Game.State.step(game)
    Kino.Frame.render(frame, game |> Game.State.to_svg() |> Kino.Image.new(:svg))
    {:cont, game}
  else
    {:halt, game}
  end
end)
```

Perfect. Now we are ready to wrap it all up with the `Game.Server`.

## Running the game server

```elixir
defmodule Game.Server do
  @moduledoc """
  The game server, handles rendering, timing, and interactions.
  """

  use GenServer
  @tick_time_ms 33

  @doc """
  Starts the server and renders the initial UI.
  """
  def start!() do
    keyboard = Kino.Control.keyboard([:status, :keydown, :keyup])
    frame = Kino.Frame.new()

    # Render the Kino widgets
    Kino.render(keyboard)
    Kino.render(frame)

    # Start the process by calling start_link/1
    {:ok, _} = Kino.start_child({__MODULE__, keyboard: keyboard, frame: frame})
    Kino.nothing()
  end

  @doc false
  def start_link(opts) do
    GenServer.start_link(__MODULE__, opts)
  end

  @impl true
  def init(opts) do
    # Subscribe to keyboard events
    Kino.Control.subscribe(opts[:keyboard], :keyboard)

    state = %{
      frame: opts[:frame],
      game: nil,
      players: [],
      timer_ref: nil
    }

    {:ok, render(state)}
  end

  @impl true
  def handle_info({:keyboard, event}, state) do
    {:noreply, handle_keyboard(state, event)}
  end

  @impl true
  def handle_info(:tick, state) do
    state = update_in(state.game, &Game.State.step/1)

    state =
      case state.game.status do
        :idle -> state
        :running -> schedule_tick(state)
      end

    {:noreply, render(state)}
  end

  # A player clicked the keyboard
  defp handle_keyboard(state, %{type: :status, enabled: true, origin: origin}) do
    case state.players do
      [] ->
        %{state | players: [%{side: :left, origin: origin}]} |> render()

      [%{origin: ^origin}] ->
        state

      [player] ->
        %{state | players: [player, %{side: :right, origin: origin}], game: Game.State.new()}
        |> render()

      _ ->
        state
    end
  end

  # The game is idle, any keypress will start the game
  defp handle_keyboard(state, %{type: :keydown, origin: origin})
       when state.game.status == :idle do
    if Enum.any?(state.players, &(&1.origin == origin)) do
      update_in(state.game, &Game.State.start/1)
      |> schedule_tick()
    else
      state
    end
  end

  # All other keypress go to one of the paddles based on the player
  defp handle_keyboard(state, %{origin: origin} = event) do
    player = Enum.find(state.players, &(&1.origin == origin))
    
    if state.game && player do
      update_in(state.game, &Game.State.on_key(&1, player.side, event))
    else
      state
    end
  end

  defp schedule_tick(state) do
    ref = Process.send_after(self(), :tick, @tick_time_ms)
    %{state | timer_ref: ref}
  end

  defp render(state) do
    output = paint(state)
    Kino.Frame.render(state.frame, output)
    state
  end

  defp paint(%{players: []}) do
    Kino.Markdown.new("Waiting for players. Enable your keyboard to join **left**!")
  end

  defp paint(%{players: [_]}) do
    Kino.Markdown.new("Waiting for another player. Enable your keyboard to join **right**!")
  end

  defp paint(state) do
    state.game |> Game.State.to_svg() |> Kino.Image.new(:svg)
  end
end
```

With all that, we are ready to play!

To verify it for yourself, open this session in a separate browser tab
and toggle the keyboard mode in both tabs. It may be challenging to act
as two players at the same time, but let's say it's a part of the game!
Once you are done, remember to toggle off the keyboard mode.

```elixir
Game.Server.start!()
```

If you want one additional challenge, you will notice that, once you
disable the keyboard, the game continues running. Could you change the
code above to stop the game once any player toggles the keyboard off?

In any case, this was a fun and long ride! The next guide should be
much shorter and we will learn [how to create our own kinos](/explore/notebooks/custom-kinos)
using Elixir and JavaScript.
