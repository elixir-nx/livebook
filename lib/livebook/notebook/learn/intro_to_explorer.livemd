# Data transform with Explorer

```elixir
Mix.install([
  {:explorer, "~> 0.5.4"},
  {:kino_explorer, "~> 0.1.1"}
])
```

## Introduction

KinoExplorer makes it intuitive to build data transform pipelines by seamlessly integrating Explorer and Livebook.
To work with it in Livebook we need two libraries:

* The [`explorer`](https://github.com/elixir-nx/explorer)
  package brings series (one-dimensional) and dataframes (two-dimensional) for fast data exploration to Elixir.

* The [`kino_explorer`](https://github.com/livebook-dev/kino_explorer) package automatically renders an `Explorer.DataFrame` or `Explorer.Series` as a data table.

The generated code make extensive use of `Explorer.DataFrame`'s functions, so it's handy to alias the module to something shorter and it will respect it.

```elixir
alias Explorer.DataFrame, as: DF
```

<!-- livebook:{"branch_parent_index":0} -->

## The Data transform smart cell

In addition to automatically rendering a DataFrame or Series as a rich table, KinoExplorer includes the Data transform Smart Cell to create insightful and flexible data pipelines.

Before we explore its features, we need some data to work with. We also need to [`require`](https://hexdocs.pm/elixir/Kernel.SpecialForms.html#require/2) the `Explorer.DataFrame` module as the Data transform cell uses the [`Explorer.Query`](https://hexdocs.pm/explorer/Explorer.Query.html#content) module.

```elixir
require Explorer.DataFrame
```

```elixir
teams =
  DF.new(
    weekday: [
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday"
    ],
    team: ["A", "B", "C", "A", "B", "C", "A", "B", "C", "A"],
    hour: [10, 9, 10, 10, 11, 15, nil, 16, 14, 16]
  )
```

The rich table offers a variety of features to make viewing data more convenient. You can easily select cells, columns or even the entire table, switch between paging and infinite scrolling, sort the columns or search for specific data. Keyboard shortcuts, including copy selection, are also available.

The table let us to quickly view the raw data, without modifying it, while the Data transform cell allows us to transform it and see the results on the fly.

<!-- livebook:{"attrs":{"assign_to":"weekdays","data_frame":"teams","data_frame_alias":"Elixir.DF","operations":[{"active":true,"column":"hour","message":null,"operation_type":"fill_missing","scalar":null,"strategy":"forward","type":"integer"},{"active":true,"column":"hour","filter":"greater","message":null,"operation_type":"filters","type":"integer","value":"10"},{"active":true,"column":"team","filter":"not equal","message":null,"operation_type":"filters","type":"string","value":"B"},{"active":true,"direction":"asc","operation_type":"sorting","sort_by":"weekday"},{"active":true,"names_from":"team","operation_type":"pivot_wider","values_from":"hour"}]},"chunks":null,"kind":"Elixir.KinoExplorer.DataTransformCell","livebook_object":"smart_cell"} -->

```elixir
weekdays =
  teams
  |> DF.mutate(hour: fill_missing(hour, :forward))
  |> DF.filter(hour > 10 and team != "B")
  |> DF.arrange(asc: weekday)
  |> DF.pivot_wider("team", "hour")
```

Let's break down what happened in the previous Data transform cell to understand its capabilities.

Currently, the Data transform cell supports 4 operations: `sorting`, `filter`, `fill_missing` and `pivot_wider`. Each operation has its own colored card and you can move the cards to reorder the operations and see the changes in real time.

Except for `pivot_wider`, you can have multiple operations of any type. If two similar operations are in a row, they are grouped, and a single operation is generated for them in the code. However, you still have individual control over each.

You can also use the toggle button to enable/disable the operations. This is particularly useful for seeing the implications of each step in your pipeline without having to rewrite it.

The initial state is purely a suggestion. You can easily add and remove operations to get the pipeline that meets your needs.

Finally, the `assign to` field allows you to save the resulting DataFrame in a variable for later use in the notebook or in conjunction with other Smart Cells. For example, to plot a chart using the Chart cell!
